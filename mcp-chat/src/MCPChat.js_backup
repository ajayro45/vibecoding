import React, { useState, useEffect, useCallback } from 'react';
import { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer, PieChart, Pie, Cell, BarChart, Bar } from 'recharts';
import { Activity, Server, Cpu, MemoryStick, DollarSign, AlertTriangle, CheckCircle, RefreshCw, Bot, Zap, Cloud, TrendingUp, Settings, Bell } from 'lucide-react';

const API_BASE = 'http://4.231.42.99:8000';

const KubernetesAIDashboard = () => {
  // State management
  const [clusterStatus, setClusterStatus] = useState(null);
  const [namespaces, setNamespaces] = useState([]);
  const [pods, setPods] = useState([]);
  const [selectedNamespace, setSelectedNamespace] = useState('default');
  const [metrics, setMetrics] = useState({});
  const [azureCosts, setAzureCosts] = useState(null);
  const [finopsData, setFinopsData] = useState(null);
  const [healingHistory, setHealingHistory] = useState([]);
  const [isLoading, setIsLoading] = useState(true);
  const [webSocket, setWebSocket] = useState(null);
  const [notifications, setNotifications] = useState([]);
  const [chatMessages, setChatMessages] = useState([]);
  const [chatInput, setChatInput] = useState('');
  const [isAutoHealEnabled, setIsAutoHealEnabled] = useState(true);
  const [activeTab, setActiveTab] = useState('overview');

  // WebSocket connection
  useEffect(() => {
    const ws = new WebSocket(`ws://4.231.42.99:8000/ws`);
    
    ws.onopen = () => {
      console.log('WebSocket connected');
      setWebSocket(ws);
    };
    
    ws.onmessage = (event) => {
      const data = JSON.parse(event.data);
      handleWebSocketMessage(data);
    };
    
    ws.onclose = () => {
      console.log('WebSocket disconnected');
      setWebSocket(null);
    };
    
    return () => {
      if (ws.readyState === WebSocket.OPEN) {
        ws.close();
      }
    };
  }, []);

  const handleWebSocketMessage = (data) => {
    switch (data.type) {
      case 'cluster_status_update':
        setClusterStatus(data.data);
        break;
      case 'cluster_issues':
        addNotification(`⚠️ ${data.data.total_issues} cluster issues detected`, 'warning');
        break;
      case 'auto_healing_triggered':
        addNotification(`🤖 AI auto-healing initiated for ${data.data.total_issues} issues`, 'info');
        break;
      case 'auto_healing_completed':
        addNotification(`✅ Auto-healing completed: ${data.data.actions_executed} actions executed`, 'success');
        break;
    }
  };

  const addNotification = (message, type = 'info') => {
    const notification = {
      id: Date.now(),
      message,
      type,
      timestamp: new Date().toLocaleTimeString()
    };
    setNotifications(prev => [notification, ...prev.slice(0, 4)]);
  };

  // API calls
  const fetchData = useCallback(async () => {
    try {
      setIsLoading(true);
      
      // Fetch cluster status
      const statusResponse = await fetch(`${API_BASE}/api/cluster/status`);
      const statusData = await statusResponse.json();
      setClusterStatus(statusData);
      
      // Fetch namespaces
      const nsResponse = await fetch(`${API_BASE}/api/namespaces`);
      const nsData = await nsResponse.json();
      setNamespaces(nsData);
      
      // Fetch pods for selected namespace
      const podsResponse = await fetch(`${API_BASE}/api/pods?namespace=${selectedNamespace}`);
      const podsData = await podsResponse.json();
      setPods(podsData);
      
      // Fetch metrics
      const metricsTypes = ['cpu_usage', 'memory_usage', 'node_cpu_usage', 'node_memory_usage'];
      const metricsData = {};
      
      for (const metricType of metricsTypes) {
        try {
          const response = await fetch(`${API_BASE}/api/metrics/${metricType}?namespace=${selectedNamespace}`);
          const data = await response.json();
          metricsData[metricType] = data;
        } catch (error) {
          console.error(`Failed to fetch ${metricType}:`, error);
        }
      }
      setMetrics(metricsData);
      
      // Fetch Azure costs
      const costsResponse = await fetch(`${API_BASE}/api/azure/costs`);
      const costsData = await costsResponse.json();
      setAzureCosts(costsData);
      
      // Fetch FinOps data
      const finopsResponse = await fetch(`${API_BASE}/api/finops/overview`);
      const finopsDataResponse = await finopsResponse.json();
      setFinopsData(finopsDataResponse);
      
      // Fetch healing history
      const healingResponse = await fetch(`${API_BASE}/api/healing/history?namespace=${selectedNamespace}`);
      const healingData = await healingResponse.json();
      setHealingHistory(healingData);
      
    } catch (error) {
      console.error('Error fetching data:', error);
      addNotification('Failed to fetch cluster data', 'error');
    } finally {
      setIsLoading(false);
    }
  }, [selectedNamespace]);

  useEffect(() => {
    fetchData();
    const interval = setInterval(fetchData, 30000); // Refresh every 30 seconds
    return () => clearInterval(interval);
  }, [fetchData]);

  const sendChatMessage = async () => {
    if (!chatInput.trim()) return;
    
    const userMessage = { role: 'user', content: chatInput, timestamp: new Date().toLocaleTimeString() };
    setChatMessages(prev => [...prev, userMessage]);
    
    try {
      const response = await fetch(`${API_BASE}/api/ai/chat`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          question: chatInput,
          namespace: selectedNamespace
        })
      });
      
      const data = await response.json();
      const aiMessage = { role: 'ai', content: data.answer, timestamp: new Date().toLocaleTimeString() };
      setChatMessages(prev => [...prev, aiMessage]);
      
    } catch (error) {
      console.error('Chat error:', error);
      const errorMessage = { role: 'ai', content: 'Sorry, I encountered an error. Please try again.', timestamp: new Date().toLocaleTimeString() };
      setChatMessages(prev => [...prev, errorMessage]);
    }
    
    setChatInput('');
  };

  const triggerAIHealing = async () => {
    try {
      addNotification('🤖 Triggering AI healing...', 'info');
      
      const response = await fetch(`${API_BASE}/api/ai/heal`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          namespace: selectedNamespace,
          aggressive: false
        })
      });
      
      const data = await response.json();
      
      if (data.healing_actions && data.healing_actions.length > 0) {
        addNotification(`✅ AI healing completed: ${data.actions_executed} actions executed`, 'success');
      } else {
        addNotification('✅ No issues detected - cluster is healthy!', 'success');
      }
      
      // Refresh data after healing
      setTimeout(fetchData, 2000);
      
    } catch (error) {
      console.error('AI healing error:', error);
      addNotification('❌ AI healing failed', 'error');
    }
  };

  const getHealthColor = (score) => {
    if (score >= 80) return '#10b981';
    if (score >= 60) return '#f59e0b';
    return '#ef4444';
  };

  const formatCurrency = (amount) => {
    return new Intl.NumberFormat('en-US', {
      style: 'currency',
      currency: 'USD'
    }).format(amount);
  };

  if (isLoading) {
    return (
      <div className="min-h-screen bg-gradient-to-br from-blue-50 to-indigo-100 flex items-center justify-center">
        <div className="text-center">
          <RefreshCw className="w-12 h-12 animate-spin text-indigo-600 mx-auto mb-4" />
          <div className="text-xl font-semibold text-gray-700">Loading Kubernetes Dashboard...</div>
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gradient-to-br from-blue-50 to-indigo-100">
      {/* Header */}
      <header className="bg-white shadow-lg">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          <div className="flex justify-between items-center h-16">
            <div className="flex items-center space-x-4">
              <div className="flex items-center space-x-2">
                <Bot className="w-8 h-8 text-indigo-600" />
                <h1 className="text-2xl font-bold bg-gradient-to-r from-indigo-600 to-purple-600 bg-clip-text text-transparent">
                  FinKubeOps
	          <h2>
	          A Finops Solution for Cloud and Kubernetes
	          </h2>
                </h1>
              </div>
              
              <div className="flex items-center space-x-2 ml-8">
                <Server className="w-5 h-5 text-gray-500" />
                <select
                  value={selectedNamespace}
                  onChange={(e) => setSelectedNamespace(e.target.value)}
                  className="border border-gray-300 rounded-lg px-3 py-1 text-sm focus:outline-none focus:ring-2 focus:ring-indigo-500"
                >
                  <option value="all">All Namespaces</option>
                  {namespaces.map(ns => (
                    <option key={ns.name} value={ns.name}>{ns.name}</option>
                  ))}
                </select>
              </div>
            </div>
            
            <div className="flex items-center space-x-4">
              {/* Notifications */}
              <div className="relative">
                <Bell className="w-6 h-6 text-gray-500" />
                {notifications.length > 0 && (
                  <span className="absolute -top-2 -right-2 bg-red-500 text-white text-xs rounded-full w-5 h-5 flex items-center justify-center">
                    {notifications.length}
                  </span>
                )}
              </div>
              
              {/* Auto-heal toggle */}
              <div className="flex items-center space-x-2">
                <span className="text-sm text-gray-600">Auto-heal</span>
                <button
                  onClick={() => setIsAutoHealEnabled(!isAutoHealEnabled)}
                  className={`relative inline-flex h-6 w-11 flex-shrink-0 cursor-pointer rounded-full border-2 border-transparent transition-colors duration-200 ease-in-out focus:outline-none ${
                    isAutoHealEnabled ? 'bg-indigo-600' : 'bg-gray-200'
                  }`}
                >
                  <span
                    className={`pointer-events-none inline-block h-5 w-5 transform rounded-full bg-white shadow ring-0 transition duration-200 ease-in-out ${
                      isAutoHealEnabled ? 'translate-x-5' : 'translate-x-0'
                    }`}
                  />
                </button>
              </div>
              
              <button
                onClick={fetchData}
                className="p-2 text-gray-500 hover:text-indigo-600 transition-colors"
              >
                <RefreshCw className="w-5 h-5" />
              </button>
            </div>
          </div>
        </div>
      </header>

      {/* Notifications */}
      {notifications.length > 0 && (
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 pt-4">
          <div className="space-y-2">
            {notifications.map(notification => (
              <div
                key={notification.id}
                className={`p-3 rounded-lg flex items-center justify-between ${
                  notification.type === 'success' ? 'bg-green-100 text-green-800' :
                  notification.type === 'warning' ? 'bg-yellow-100 text-yellow-800' :
                  notification.type === 'error' ? 'bg-red-100 text-red-800' :
                  'bg-blue-100 text-blue-800'
                }`}
              >
                <span className="text-sm">{notification.message}</span>
                <span className="text-xs opacity-75">{notification.timestamp}</span>
              </div>
            ))}
          </div>
        </div>
      )}

      {/* Tab Navigation */}
      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 pt-6">
        <div className="border-b border-gray-200">
          <nav className="-mb-px flex space-x-8">
            {[
              { id: 'overview', name: 'Overview', icon: Activity },
              { id: 'pods', name: 'Pods', icon: Server },
              { id: 'metrics', name: 'Metrics', icon: TrendingUp },
              { id: 'finops', name: 'FinOps', icon: DollarSign },
              { id: 'ai-chat', name: 'AI Chat', icon: Bot },
            ].map(tab => {
              const Icon = tab.icon;
              return (
                <button
                  key={tab.id}
                  onClick={() => setActiveTab(tab.id)}
                  className={`${
                    activeTab === tab.id
                      ? 'border-indigo-500 text-indigo-600'
                      : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300'
                  } whitespace-nowrap py-2 px-1 border-b-2 font-medium text-sm flex items-center space-x-2`}
                >
                  <Icon className="w-4 h-4" />
                  <span>{tab.name}</span>
                </button>
              );
            })}
          </nav>
        </div>
      </div>

      {/* Main Content */}
      <main className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
        {activeTab === 'overview' && (
          <div className="space-y-8">
            {/* Cluster Status Cards */}
            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
              <div className="bg-white rounded-xl shadow-lg p-6">
                <div className="flex items-center justify-between">
                  <div>
                    <p className="text-sm font-medium text-gray-600">Cluster Health</p>
                    <p className="text-2xl font-bold" style={{ color: getHealthColor(clusterStatus?.cluster_health?.score || 0) }}>
                      {clusterStatus?.cluster_health?.score || 0}%
                    </p>
                  </div>
                  <div className="p-3 rounded-lg" style={{ backgroundColor: `${getHealthColor(clusterStatus?.cluster_health?.score || 0)}20` }}>
                    <Activity className="w-6 h-6" style={{ color: getHealthColor(clusterStatus?.cluster_health?.score || 0) }} />
                  </div>
                </div>
              </div>

              <div className="bg-white rounded-xl shadow-lg p-6">
                <div className="flex items-center justify-between">
                  <div>
                    <p className="text-sm font-medium text-gray-600">Running Pods</p>
                    <p className="text-2xl font-bold text-green-600">
                      {clusterStatus?.cluster_health?.pods?.running || 0}
                    </p>
                  </div>
                  <div className="p-3 bg-green-100 rounded-lg">
                    <CheckCircle className="w-6 h-6 text-green-600" />
                  </div>
                </div>
              </div>

              <div className="bg-white rounded-xl shadow-lg p-6">
                <div className="flex items-center justify-between">
                  <div>
                    <p className="text-sm font-medium text-gray-600">Issues</p>
                    <p className="text-2xl font-bold text-red-600">
                      {(clusterStatus?.cluster_health?.pods?.failed || 0) + (clusterStatus?.cluster_health?.pods?.pending || 0)}
                    </p>
                  </div>
                  <div className="p-3 bg-red-100 rounded-lg">
                    <AlertTriangle className="w-6 h-6 text-red-600" />
                  </div>
                </div>
              </div>

              <div className="bg-white rounded-xl shadow-lg p-6">
                <div className="flex items-center justify-between">
                  <div>
                    <p className="text-sm font-medium text-gray-600">Monthly Cost</p>
                    <p className="text-2xl font-bold text-blue-600">
                      {formatCurrency(finopsData?.cost_data?.total_monthly_cost || 0)}
                    </p>
                  </div>
                  <div className="p-3 bg-blue-100 rounded-lg">
                    <DollarSign className="w-6 h-6 text-blue-600" />
                  </div>
                </div>
              </div>
            </div>

            {/* AI Healing Section */}
            <div className="bg-white rounded-xl shadow-lg p-6">
              <div className="flex items-center justify-between mb-6">
                <div className="flex items-center space-x-3">
                  <div className="p-2 bg-purple-100 rounded-lg">
                    <Bot className="w-6 h-6 text-purple-600" />
                  </div>
                  <div>
                    <h3 className="text-lg font-semibold text-gray-900">AI-Powered Healing</h3>
                    <p className="text-sm text-gray-600">Automatic cluster issue detection and resolution</p>
                  </div>
                </div>
                <button
                  onClick={triggerAIHealing}
                  className="bg-gradient-to-r from-purple-600 to-indigo-600 text-white px-6 py-2 rounded-lg hover:from-purple-700 hover:to-indigo-700 transition-all flex items-center space-x-2"
                >
                  <Zap className="w-4 h-4" />
                  <span>Trigger AI Healing</span>
                </button>
              </div>

              {healingHistory.length > 0 && (
                <div className="space-y-3">
                  <h4 className="font-medium text-gray-900">Recent Healing Actions</h4>
                  {healingHistory.slice(0, 3).map((action, index) => (
                    <div key={index} className="flex items-center justify-between p-3 bg-gray-50 rounded-lg">
                      <div>
                        <p className="text-sm font-medium text-gray-900">{action.issue_detected}</p>
                        <p className="text-xs text-gray-600">Success rate: {action.success_rate}%</p>
                      </div>
                      <span className="text-xs text-gray-500">
                        {new Date(action.timestamp).toLocaleString()}
                      </span>
                    </div>
                  ))}
                </div>
              )}
            </div>
          </div>
        )}

        {activeTab === 'pods' && (
          <div className="space-y-6">
            <div className="bg-white rounded-xl shadow-lg overflow-hidden">
              <div className="px-6 py-4 border-b border-gray-200">
                <h3 className="text-lg font-semibold text-gray-900">Pods in {selectedNamespace}</h3>
              </div>
              <div className="overflow-x-auto">
                <table className="min-w-full divide-y divide-gray-200">
                  <thead className="bg-gray-50">
                    <tr>
                      <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Name</th>
                      <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Status</th>
                      <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Ready</th>
                      <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Restarts</th>
                      <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Age</th>
                      <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Node</th>
                    </tr>
                  </thead>
                  <tbody className="bg-white divide-y divide-gray-200">
                    {pods.map((pod, index) => (
                      <tr key={index} className="hover:bg-gray-50">
                        <td className="px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900">
                          {pod.name}
                        </td>
                        <td className="px-6 py-4 whitespace-nowrap">
                          <span className={`inline-flex px-2 py-1 text-xs font-semibold rounded-full ${
                            pod.phase === 'Running' ? 'bg-green-100 text-green-800' :
                            pod.phase === 'Pending' ? 'bg-yellow-100 text-yellow-800' :
                            pod.phase === 'Failed' ? 'bg-red-100 text-red-800' :
                            'bg-gray-100 text-gray-800'
                          }`}>
                            {pod.phase}
                          </span>
                        </td>
                        <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">{pod.ready}</td>
                        <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">{pod.restarts}</td>
                        <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">{pod.age}</td>
                        <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">{pod.node}</td>
                      </tr>
                    ))}
                  </tbody>
                </table>
              </div>
            </div>
          </div>
        )}

        {activeTab === 'metrics' && (
          <div className="space-y-6">
            <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
              {/* CPU Usage Chart */}
              {metrics.cpu_usage && (
                <div className="bg-white rounded-xl shadow-lg p-6">
                  <div className="flex items-center space-x-2 mb-4">
                    <Cpu className="w-5 h-5 text-blue-600" />
                    <h3 className="text-lg font-semibold text-gray-900">CPU Usage</h3>
                  </div>
                  <div className="h-64">
                    <ResponsiveContainer width="100%" height="100%">
                      <LineChart data={metrics.cpu_usage.labels?.map((label, index) => ({
                        time: label,
                        ...metrics.cpu_usage.datasets?.reduce((acc, dataset) => ({
                          ...acc,
                          [dataset.label]: dataset.data[index] || 0
                        }), {})
                      })) || []}>
                        <CartesianGrid strokeDasharray="3 3" />
                        <XAxis dataKey="time" />
                        <YAxis />
                        <Tooltip />
                        <Legend />
                        {metrics.cpu_usage.datasets?.map((dataset, index) => (
                          <Line
                            key={index}
                            type="monotone"
                            dataKey={dataset.label}
                            stroke={dataset.borderColor}
                            strokeWidth={2}
                          />
                        ))}
                      </LineChart>
                    </ResponsiveContainer>
                  </div>
                </div>
              )}

              {/* Memory Usage Chart */}
              {metrics.memory_usage && (
                <div className="bg-white rounded-xl shadow-lg p-6">
                  <div className="flex items-center space-x-2 mb-4">
                    <MemoryStick className="w-5 h-5 text-green-600" />
                    <h3 className="text-lg font-semibold text-gray-900">Memory Usage</h3>
                  </div>
                  <div className="h-64">
                    <ResponsiveContainer width="100%" height="100%">
                      <LineChart data={metrics.memory_usage.labels?.map((label, index) => ({
                        time: label,
                        ...metrics.memory_usage.datasets?.reduce((acc, dataset) => ({
                          ...acc,
                          [dataset.label]: dataset.data[index] || 0
                        }), {})
                      })) || []}>
                        <CartesianGrid strokeDasharray="3 3" />
                        <XAxis dataKey="time" />
                        <YAxis />
                        <Tooltip />
                        <Legend />
                        {metrics.memory_usage.datasets?.map((dataset, index) => (
                          <Line
                            key={index}
                            type="monotone"
                            dataKey={dataset.label}
                            stroke={dataset.borderColor}
                            strokeWidth={2}
                          />
                        ))}
                      </LineChart>
                    </ResponsiveContainer>
                  </div>
                </div>
              )}
            </div>

            {/* Node Metrics */}
            <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
              {metrics.node_cpu_usage && (
                <div className="bg-white rounded-xl shadow-lg p-6">
                  <h3 className="text-lg font-semibold text-gray-900 mb-4">Node CPU Usage</h3>
                  <div className="h-64">
                    <ResponsiveContainer width="100%" height="100%">
                      <BarChart data={metrics.node_cpu_usage.labels?.map((label, index) => ({
                        node: label,
                        ...metrics.node_cpu_usage.datasets?.reduce((acc, dataset) => ({
                          ...acc,
                          [dataset.label]: dataset.data[index] || 0
                        }), {})
                      })) || []}>
                        <CartesianGrid strokeDasharray="3 3" />
                        <XAxis dataKey="node" />
                        <YAxis />
                        <Tooltip />
                        <Legend />
                        {metrics.node_cpu_usage.datasets?.map((dataset, index) => (
                          <Bar key={index} dataKey={dataset.label} fill={dataset.borderColor} />
                        ))}
                      </BarChart>
                    </ResponsiveContainer>
                  </div>
                </div>
              )}

              {metrics.node_memory_usage && (
                <div className="bg-white rounded-xl shadow-lg p-6">
                  <h3 className="text-lg font-semibold text-gray-900 mb-4">Node Memory Usage</h3>
                  <div className="h-64">
                    <ResponsiveContainer width="100%" height="100%">
                      <BarChart data={metrics.node_memory_usage.labels?.map((label, index) => ({
                        node: label,
                        ...metrics.node_memory_usage.datasets?.reduce((acc, dataset) => ({
                          ...acc,
                          [dataset.label]: dataset.data[index] || 0
                        }), {})
                      })) || []}>
                        <CartesianGrid strokeDasharray="3 3" />
                        <XAxis dataKey="node" />
                        <YAxis />
                        <Tooltip />
                        <Legend />
                        {metrics.node_memory_usage.datasets?.map((dataset, index) => (
                          <Bar key={index} dataKey={dataset.label} fill={dataset.borderColor} />
                        ))}
                      </BarChart>
                    </ResponsiveContainer>
                  </div>
                </div>
              )}
            </div>
          </div>
        )}

        {activeTab === 'finops' && (
          <div className="space-y-6">
            {/* Cost Overview */}
            <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
              <div className="bg-white rounded-xl shadow-lg p-6">
                <div className="flex items-center space-x-3 mb-4">
                  <DollarSign className="w-6 h-6 text-green-600" />
                  <h3 className="text-lg font-semibold text-gray-900">Monthly Cost</h3>
                </div>
                <p className="text-3xl font-bold text-green-600">
                  {formatCurrency(finopsData?.cost_data?.total_monthly_cost || 0)}
                </p>
              </div>

              <div className="bg-white rounded-xl shadow-lg p-6">
                <div className="flex items-center space-x-3 mb-4">
                  <TrendingUp className="w-6 h-6 text-blue-600" />
                  <h3 className="text-lg font-semibold text-gray-900">Potential Savings</h3>
                </div>
                <p className="text-3xl font-bold text-blue-600">
                  {formatCurrency(finopsData?.cost_data?.total_potential_savings || 0)}
                </p>
              </div>

              <div className="bg-white rounded-xl shadow-lg p-6">
                <div className="flex items-center space-x-3 mb-4">
                  <Cloud className="w-6 h-6 text-purple-600" />
                  <h3 className="text-lg font-semibold text-gray-900">Resources</h3>
                </div>
                <p className="text-3xl font-bold text-purple-600">
                  {finopsData?.cost_data?.resource_count || 0}
                </p>
              </div>
            </div>

            {/* Cost by Type Chart */}
            {finopsData?.cost_data?.cost_by_type && (
              <div className="bg-white rounded-xl shadow-lg p-6">
                <h3 className="text-lg font-semibold text-gray-900 mb-4">Cost by Resource Type</h3>
                <div className="h-64">
                  <ResponsiveContainer width="100%" height="100%">
                    <PieChart>
                      <Pie
                        data={Object.entries(finopsData.cost_data.cost_by_type).map(([name, value]) => ({
                          name,
                          value
                        }))}
                        cx="50%"
                        cy="50%"
                        labelLine={false}
                        label={({ name, percent }) => `${name} ${(percent * 100).toFixed(0)}%`}
                        outerRadius={80}
                        fill="#8884d8"
                        dataKey="value"
                      >
                        {Object.entries(finopsData.cost_data.cost_by_type).map((entry, index) => (
                          <Cell key={`cell-${index}`} fill={['#0088FE', '#00C49F', '#FFBB28', '#FF8042', '#8884D8'][index % 5]} />
                        ))}
                      </Pie>
                      <Tooltip formatter={(value) => formatCurrency(value)} />
                    </PieChart>
                  </ResponsiveContainer>
                </div>
              </div>
            )}

            {/* AI Recommendations */}
            {finopsData?.ai_recommendations && (
              <div className="bg-white rounded-xl shadow-lg p-6">
                <div className="flex items-center space-x-3 mb-4">
                  <Bot className="w-6 h-6 text-purple-600" />
                  <h3 className="text-lg font-semibold text-gray-900">AI Cost Optimization Recommendations</h3>
                </div>
                <div className="prose prose-sm max-w-none">
                  <pre className="whitespace-pre-wrap text-sm text-gray-700 bg-gray-50 p-4 rounded-lg">
                    {finopsData.ai_recommendations}
                  </pre>
                </div>
              </div>
            )}
          </div>
        )}

        {activeTab === 'ai-chat' && (
          <div className="bg-white rounded-xl shadow-lg">
            <div className="flex flex-col h-96">
              {/* Chat Header */}
              <div className="px-6 py-4 border-b border-gray-200">
                <div className="flex items-center space-x-3">
                  <Bot className="w-6 h-6 text-purple-600" />
                  <h3 className="text-lg font-semibold text-gray-900">AI Assistant</h3>
                  <span className="text-sm text-gray-600">Ask about your Kubernetes cluster</span>
                </div>
              </div>

              {/* Chat Messages */}
              <div className="flex-1 overflow-y-auto p-6 space-y-4">
                {chatMessages.length === 0 && (
                  <div className="text-center text-gray-500 py-8">
                    <Bot className="w-12 h-12 mx-auto mb-4 text-gray-300" />
                    <p>Start a conversation with the AI assistant!</p>
                    <p className="text-sm mt-2">Try asking: "What pods are having issues?" or "How can I optimize costs?"</p>
                  </div>
                )}
                
                {chatMessages.map((message, index) => (
                  <div key={index} className={`flex ${message.role === 'user' ? 'justify-end' : 'justify-start'}`}>
                    <div className={`max-w-xs lg:max-w-md px-4 py-2 rounded-lg ${
                      message.role === 'user'
                        ? 'bg-indigo-600 text-white'
                        : 'bg-gray-100 text-gray-900'
                    }`}>
                      <p className="text-sm">{message.content}</p>
                      <p className="text-xs mt-1 opacity-75">{message.timestamp}</p>
                    </div>
                  </div>
                ))}
              </div>

              {/* Chat Input */}
              <div className="px-6 py-4 border-t border-gray-200">
                <div className="flex space-x-4">
                  <input
                    type="text"
                    value={chatInput}
                    onChange={(e) => setChatInput(e.target.value)}
                    onKeyPress={(e) => e.key === 'Enter' && sendChatMessage()}
                    placeholder="Ask the AI about your cluster..."
                    className="flex-1 border border-gray-300 rounded-lg px-4 py-2 focus:outline-none focus:ring-2 focus:ring-indigo-500"
                  />
                  <button
                    onClick={sendChatMessage}
                    disabled={!chatInput.trim()}
                    className="bg-indigo-600 text-white px-6 py-2 rounded-lg hover:bg-indigo-700 disabled:opacity-50 disabled:cursor-not-allowed transition-colors"
                  >
                    Send
                  </button>
                </div>
              </div>
            </div>
          </div>
        )}
      </main>
    </div>
  );
};

export default KubernetesAIDashboard;
